Python Further Advanced
=======================
September 15-19 2025

Toby Dussek

9:30  start
11:00 coffee
12:00 lunch until 1:00
3:00  tea break break until 3:15
4:30  end

The course Website is
  https://sites.neueda.com/lm_ericsson_beyond_advanced_python/site/index.html
All my code will be in this repository
  https://github.com/onionmccabbage/pythonFurtherAdvancedSept2025
Credentials for course recording: student pwd: Belfast2024


Monday
> welcome
    - introduce yourself
    - existing Python experience
    - other technologies
    - anything particular from this course
> we will be installing additional packages as needed
- conventions
  - as will all languages, identifiers can use letters, numbers and underscore (don't start with a number)
  - some conventions: ClassesUsePascalCase, methodsUseCamelCase identifiers_use_snake_case
- design patterns - following proven good practices
  https://refactoring.guru/design-patterns/python
  https://www.geeksforgeeks.org/python/python-design-patterns/
  https://blog.ahmadwkhan.com/design-patterns-in-python-the-complete-reference
  https://python-patterns.guide/
  
> constructor pattern
> Decorator pattern
> Factory pattern
> Facade pattern
> command pattern
> proxy pattern
> anti-patterns - when things go wrong and you do it again!
> after lunch review exercise (show what you built)
> immediate Python
> redirection and context
> Abstract base class
- we will need Jupyter Notebooks later in the week

Tuesday
> how to access the course recordings
> using __str__ and __repr__
> architectural patterns: inheritance, composition...
> __slots__
> stateful pattern
> functional design
> concurrency and parallel code
> the GIL
  see https://realpython.com/python-gil/
  from 3.14 (Oct 7 2025) we can avoid the GIL
  see https://www.pythoncheatsheet.org/blog/python-3-14-breaking-free-from-gil
> thread functions and thread classes
> after lunch review exercise
> can we kill threads which have hung or other problems....
  we never kill thrreads (there is no mechanism in Python)
  we manage threads e.g. https://www.geeksforgeeks.org/python/python-different-ways-to-kill-a-thread/
> thread locks/rlocks/semaphores
> semaphore quantity depends on the capabilities of the asset being accessed

Wednesday
> generators and comprehension
> a word about venv see https://python.land/virtual-environments/virtualenv
> daemon threads, thread events
> custom thread decorator to make classes and methods thread safe
> solve the double-locking problem (both decorators)
> the 'with' operator
> asyncio (Python 3.7 or better)
  see https://docs.python.org/3/library/asyncio-task.html#coroutines
> multiprocessing
> why use asyncio, threads or a processes
  see https://medium.com/@Gayathri_krish/threading-vs-multiprocessing-vs-asyncio-in-python-which-one-should-you-use-7a3b7649d004
  and https://www.krython.com/tutorial/python/threading-vs-multiprocessing-vs-asyncio
> performance and timing
> profiling with @profile and cProfile
> after lunch review exercise
> prepare for Thursday  
> observables and subscribers
> RxPY https://rxpy.readthedocs.io/en/latest/index.html
       https://rxmarbles.com/

Thursday
q - index_col
- options for Jupyter Notebooks:
  - use Anaconda (NB it is likely you cannot use the free Anaconda within Ericsson)
  - pip install notebook (see https://jupyter.org/install)
  - pip install jupyter (or pip3 install...) (or python -m pip3 install ...)
  - just use existing VSCode (or similar)
  - use cloud (e.g. colab https://colab.research.google.com/ or https://jupyter.org/try)
  - or just write NORMAL python modules
- Python for Data Analysis
  we will need:
  - Jupyter notebooks
  - numpy
  - pandas
  - matplotlib
- using Jupyter notebooks
   Data sources (csv, xlsx, text, db, url...)
   you can 'pip install jupyter' then start it with 'python -m notebook'
   then you will also need to pip install numpy, pandas etc.
- numpy and data structures: the arange and array 
- pandas: series and dataframe
- NaN, creating stuctures, analysis (stats)
- data cleansing and preparation
- descriptive statistics
- handling files and remote data
- after lunch review exercise

Friday
- data vizualisation with matplotlib
- statistical analysis and correlation
  REMEMBER: correlation does NOT prove CAUSATION
  https://www.tylervigen.com/spurious-correlations
- review of microservices (inc. multi threading) and asyncio
  q - can we control the number of concurrent accesses to our microservice....
- Flask:
  to run as a debug server: flask --app my_flask.py --debug run
  or else debug=True in the app run declaration
  see https://flask.palletsprojects.com/en/2.3.x/
- after lunch review exercise
- end of course feedback